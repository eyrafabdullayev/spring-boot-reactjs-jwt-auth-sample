{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nexport const USERNAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USERNAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  createJwtToken(token) {\n    return `Bearer ${token}`;\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/eyraf/Workspace/spring-boot-reactjs-jwt-auth-sample/frontend-spring-boot-reactjs-jwt-auth-sample/src/service/AuthenticationService.jsx"],"names":["axios","API_URL","USERNAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","username","password","post","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJwtToken","isUserLoggedIn","user","getItem","getLoggedInUserName","logout","removeItem","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,+BAA+B,GAAG,mBAAxC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAON,KAAK,CAACO,IAAN,CAAY,GAAEN,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDE,EAAAA,6BAA6B,CAACH,QAAD,EAAWI,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBT,+BAAvB,EAAwDG,QAAxD;AACA,SAAKO,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAQ,UAASA,KAAM,EAAvB;AACH;;AAEDK,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBd,+BAAvB,CAAX;AACA,QAAGa,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBd,+BAAvB,CAAX;AACA,QAAGa,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;AAClB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACLR,IAAAA,cAAc,CAACS,UAAf,CAA0BjB,+BAA1B;AACH;;AAEDU,EAAAA,sBAAsB,CAACH,KAAD,EAAQ;AAC1BT,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKT,cAAL,EAAH,EAA0B;AACtBS,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BhB,KAA/B;AACH;;AACD,aAAOc,MAAP;AACH,KANL;AAQH;;AA3CuB;;AA8C5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:8080'\n\nexport const USERNAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USERNAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJwtToken(token))\n    }\n\n    createJwtToken(token) {\n        return `Bearer ${token}`\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME)\n        if(user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME)\n        if(user === null) return ''\n        return user\n    }\n\n    logout() {\n        sessionStorage.removeItem(USERNAME_SESSION_ATTRIBUTE_NAME)\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()) {\n                    config.headers.authorization = token                \n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}